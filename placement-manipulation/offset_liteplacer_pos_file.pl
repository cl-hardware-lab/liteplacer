#!/usr/bin/perl
#-
# SPDX-License-Identifier: BSD-2-Clause
#
# Copyright (c) 2018 Brian Jones
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#


# .pos file adjuster for Liteplacer pick and place
# Brian Jones  15/6/2018

# see step_repeat_liteplacer_pos_file.pl for a step and repeat version

# input file from Eagle consists of component lines only (no headers, comments or similar), space separated with fields in order:
# Reference,Xpos,Ypos,Rotation,Value,Footprint
# double and single quotes are stripped.
# References must consist of one or more [a-zA-Z_-] followed by one or more [0-9]

# We want fileds in order:
# Reference,Value,Footprint,Xpos,Ypos,Rotation

use strict;
use warnings;

# Conventions
# Rotation=0 is the CAD system PCB orientation used to generate the positions file
# The origin of the .pos file for the individual board is entered in @x_positions_list,@y_positions_list for each of the boards in an xy matrix
# width/height of the panel is measured with an individual PCB in its 0 rotation also having a 0 entry in @rotations_list
# ie if the PCBs were all same orientation as the input file one, then all rotations are 0, and width=x direction, height=y direction




# **** START parameters to edit ****

open (INFILE,'<','LEDbacklight-top4.pos');
open (OUTFILE,'>','LEDbacklight-top4-rot.pos');

my $panel_rotation = 90;		# Placer 0 position from panel 0 position, in degrees ccw
my $panel_w = 136	;			# Panel width at 0 rotation
my $panel_h = 76	;			# Panel height at 0 rotation

# changes here are equivalent to editing each of @x_positions_list, @y_positions_list prior to rotation
my $panel_x_correction = 0;		# value added to all component x to correct for panel position
my $panel_y_correction = 0;		# value added to all component y to correct for panel position


# **** END parameters to edit ****




# output header
print OUTFILE "Ref,Value,Footprint,X,Y,Rot\n";

while (<INFILE>) {
	print "$_";
	chop;
	$_ =~ s/"//g;
	$_ =~ s/'//g;
	
#	my ($ref,$xpos,$ypos,$comp_rot,$val,$footprint) = split(' ');	# Eagle as generated by mountsmd.ulp
	my ($ref,$val,$footprint,$xpos,$ypos,$comp_rot) = split(',');	# Kicad

	print "WAS $ref,$val,$footprint,$xpos,$ypos,$comp_rot\n";
		
# correct positions within the panel
	my $newx = $xpos + $panel_x_correction;
	my $newy = $ypos + $panel_y_correction;

# Now correct for panel rotation
	my $panel_x ;
	my $panel_y ;
	my $comp_rot_final = $panel_rotation + $comp_rot ;
	$comp_rot_final = $comp_rot_final >= 360 ? $comp_rot_final - 360 : $comp_rot_final ;
	$comp_rot_final = $comp_rot_final < 0 ? $comp_rot_final + 360 : $comp_rot_final ;		
	if ($panel_rotation == 0) {
		$panel_x = $newx ;
		$panel_y = $newy ;
	} elsif ($panel_rotation == 90) {
		$panel_x = $panel_h - $newy ;
		$panel_y = $newx ;
	} elsif ($panel_rotation == 180) {
		$panel_x = $panel_w - $newx ;
		$panel_y = $panel_h - $newy ;
	} elsif ($panel_rotation == 270) {
		$panel_x = $newx ;
		$panel_y = $panel_w - $newx ;
	} else {
		print "PR $comp_rot_final\n" ;
	}
#	print "NOW $ref,$val,$footprint,$panel_x,$panel_y,$comp_rot_final\n\n";
	print OUTFILE "$ref,$val,$footprint,$panel_x,$panel_y,$comp_rot_final\n";
} # end while input lines

close OUTFILE;
close INFILE;


